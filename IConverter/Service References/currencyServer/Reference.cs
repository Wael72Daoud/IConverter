//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18010
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace IConverter.currencyServer {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.daenet.de/webservices/CurrencyServer", ConfigurationName="currencyServer.CurrencyServerWebServiceSoap")]
    public interface CurrencyServerWebServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.daenet.de/webservices/CurrencyServer/getDataSet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BegingetDataSet(string provider, System.AsyncCallback callback, object asyncState);
        
        IConverter.currencyServer.ArrayOfXElement EndgetDataSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.daenet.de/webservices/CurrencyServer/getXmlStream", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BegingetXmlStream(string provider, System.AsyncCallback callback, object asyncState);
        
        string EndgetXmlStream(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.daenet.de/webservices/CurrencyServer/getCurrencyValue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BegingetCurrencyValue(string provider, string srcCurrency, string dstCurrency, System.AsyncCallback callback, object asyncState);
        
        double EndgetCurrencyValue(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.daenet.de/webservices/CurrencyServer/getDollarValue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BegingetDollarValue(string provider, string currency, System.AsyncCallback callback, object asyncState);
        
        double EndgetDollarValue(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.daenet.de/webservices/CurrencyServer/getProviderDescription", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BegingetProviderDescription(string provider, System.AsyncCallback callback, object asyncState);
        
        string EndgetProviderDescription(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.daenet.de/webservices/CurrencyServer/getProviderTimestamp", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BegingetProviderTimestamp(string providerId, string provider, System.AsyncCallback callback, object asyncState);
        
        string EndgetProviderTimestamp(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.daenet.de/webservices/CurrencyServer/getProviderList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BegingetProviderList(System.AsyncCallback callback, object asyncState);
        
        string EndgetProviderList(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface CurrencyServerWebServiceSoapChannel : IConverter.currencyServer.CurrencyServerWebServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getDataSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getDataSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IConverter.currencyServer.ArrayOfXElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IConverter.currencyServer.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getXmlStreamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getXmlStreamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getCurrencyValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCurrencyValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public double Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getDollarValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getDollarValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public double Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getProviderDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getProviderDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getProviderTimestampCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getProviderTimestampCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getProviderListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getProviderListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurrencyServerWebServiceSoapClient : System.ServiceModel.ClientBase<IConverter.currencyServer.CurrencyServerWebServiceSoap>, IConverter.currencyServer.CurrencyServerWebServiceSoap {
        
        private BeginOperationDelegate onBegingetDataSetDelegate;
        
        private EndOperationDelegate onEndgetDataSetDelegate;
        
        private System.Threading.SendOrPostCallback ongetDataSetCompletedDelegate;
        
        private BeginOperationDelegate onBegingetXmlStreamDelegate;
        
        private EndOperationDelegate onEndgetXmlStreamDelegate;
        
        private System.Threading.SendOrPostCallback ongetXmlStreamCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCurrencyValueDelegate;
        
        private EndOperationDelegate onEndgetCurrencyValueDelegate;
        
        private System.Threading.SendOrPostCallback ongetCurrencyValueCompletedDelegate;
        
        private BeginOperationDelegate onBegingetDollarValueDelegate;
        
        private EndOperationDelegate onEndgetDollarValueDelegate;
        
        private System.Threading.SendOrPostCallback ongetDollarValueCompletedDelegate;
        
        private BeginOperationDelegate onBegingetProviderDescriptionDelegate;
        
        private EndOperationDelegate onEndgetProviderDescriptionDelegate;
        
        private System.Threading.SendOrPostCallback ongetProviderDescriptionCompletedDelegate;
        
        private BeginOperationDelegate onBegingetProviderTimestampDelegate;
        
        private EndOperationDelegate onEndgetProviderTimestampDelegate;
        
        private System.Threading.SendOrPostCallback ongetProviderTimestampCompletedDelegate;
        
        private BeginOperationDelegate onBegingetProviderListDelegate;
        
        private EndOperationDelegate onEndgetProviderListDelegate;
        
        private System.Threading.SendOrPostCallback ongetProviderListCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public CurrencyServerWebServiceSoapClient() {
        }
        
        public CurrencyServerWebServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CurrencyServerWebServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyServerWebServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyServerWebServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<getDataSetCompletedEventArgs> getDataSetCompleted;
        
        public event System.EventHandler<getXmlStreamCompletedEventArgs> getXmlStreamCompleted;
        
        public event System.EventHandler<getCurrencyValueCompletedEventArgs> getCurrencyValueCompleted;
        
        public event System.EventHandler<getDollarValueCompletedEventArgs> getDollarValueCompleted;
        
        public event System.EventHandler<getProviderDescriptionCompletedEventArgs> getProviderDescriptionCompleted;
        
        public event System.EventHandler<getProviderTimestampCompletedEventArgs> getProviderTimestampCompleted;
        
        public event System.EventHandler<getProviderListCompletedEventArgs> getProviderListCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IConverter.currencyServer.CurrencyServerWebServiceSoap.BegingetDataSet(string provider, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetDataSet(provider, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IConverter.currencyServer.ArrayOfXElement IConverter.currencyServer.CurrencyServerWebServiceSoap.EndgetDataSet(System.IAsyncResult result) {
            return base.Channel.EndgetDataSet(result);
        }
        
        private System.IAsyncResult OnBegingetDataSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string provider = ((string)(inValues[0]));
            return ((IConverter.currencyServer.CurrencyServerWebServiceSoap)(this)).BegingetDataSet(provider, callback, asyncState);
        }
        
        private object[] OnEndgetDataSet(System.IAsyncResult result) {
            IConverter.currencyServer.ArrayOfXElement retVal = ((IConverter.currencyServer.CurrencyServerWebServiceSoap)(this)).EndgetDataSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetDataSetCompleted(object state) {
            if ((this.getDataSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getDataSetCompleted(this, new getDataSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getDataSetAsync(string provider) {
            this.getDataSetAsync(provider, null);
        }
        
        public void getDataSetAsync(string provider, object userState) {
            if ((this.onBegingetDataSetDelegate == null)) {
                this.onBegingetDataSetDelegate = new BeginOperationDelegate(this.OnBegingetDataSet);
            }
            if ((this.onEndgetDataSetDelegate == null)) {
                this.onEndgetDataSetDelegate = new EndOperationDelegate(this.OnEndgetDataSet);
            }
            if ((this.ongetDataSetCompletedDelegate == null)) {
                this.ongetDataSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetDataSetCompleted);
            }
            base.InvokeAsync(this.onBegingetDataSetDelegate, new object[] {
                        provider}, this.onEndgetDataSetDelegate, this.ongetDataSetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IConverter.currencyServer.CurrencyServerWebServiceSoap.BegingetXmlStream(string provider, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetXmlStream(provider, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IConverter.currencyServer.CurrencyServerWebServiceSoap.EndgetXmlStream(System.IAsyncResult result) {
            return base.Channel.EndgetXmlStream(result);
        }
        
        private System.IAsyncResult OnBegingetXmlStream(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string provider = ((string)(inValues[0]));
            return ((IConverter.currencyServer.CurrencyServerWebServiceSoap)(this)).BegingetXmlStream(provider, callback, asyncState);
        }
        
        private object[] OnEndgetXmlStream(System.IAsyncResult result) {
            string retVal = ((IConverter.currencyServer.CurrencyServerWebServiceSoap)(this)).EndgetXmlStream(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetXmlStreamCompleted(object state) {
            if ((this.getXmlStreamCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getXmlStreamCompleted(this, new getXmlStreamCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getXmlStreamAsync(string provider) {
            this.getXmlStreamAsync(provider, null);
        }
        
        public void getXmlStreamAsync(string provider, object userState) {
            if ((this.onBegingetXmlStreamDelegate == null)) {
                this.onBegingetXmlStreamDelegate = new BeginOperationDelegate(this.OnBegingetXmlStream);
            }
            if ((this.onEndgetXmlStreamDelegate == null)) {
                this.onEndgetXmlStreamDelegate = new EndOperationDelegate(this.OnEndgetXmlStream);
            }
            if ((this.ongetXmlStreamCompletedDelegate == null)) {
                this.ongetXmlStreamCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetXmlStreamCompleted);
            }
            base.InvokeAsync(this.onBegingetXmlStreamDelegate, new object[] {
                        provider}, this.onEndgetXmlStreamDelegate, this.ongetXmlStreamCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IConverter.currencyServer.CurrencyServerWebServiceSoap.BegingetCurrencyValue(string provider, string srcCurrency, string dstCurrency, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCurrencyValue(provider, srcCurrency, dstCurrency, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        double IConverter.currencyServer.CurrencyServerWebServiceSoap.EndgetCurrencyValue(System.IAsyncResult result) {
            return base.Channel.EndgetCurrencyValue(result);
        }
        
        private System.IAsyncResult OnBegingetCurrencyValue(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string provider = ((string)(inValues[0]));
            string srcCurrency = ((string)(inValues[1]));
            string dstCurrency = ((string)(inValues[2]));
            return ((IConverter.currencyServer.CurrencyServerWebServiceSoap)(this)).BegingetCurrencyValue(provider, srcCurrency, dstCurrency, callback, asyncState);
        }
        
        private object[] OnEndgetCurrencyValue(System.IAsyncResult result) {
            double retVal = ((IConverter.currencyServer.CurrencyServerWebServiceSoap)(this)).EndgetCurrencyValue(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetCurrencyValueCompleted(object state) {
            if ((this.getCurrencyValueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCurrencyValueCompleted(this, new getCurrencyValueCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCurrencyValueAsync(string provider, string srcCurrency, string dstCurrency) {
            this.getCurrencyValueAsync(provider, srcCurrency, dstCurrency, null);
        }
        
        public void getCurrencyValueAsync(string provider, string srcCurrency, string dstCurrency, object userState) {
            if ((this.onBegingetCurrencyValueDelegate == null)) {
                this.onBegingetCurrencyValueDelegate = new BeginOperationDelegate(this.OnBegingetCurrencyValue);
            }
            if ((this.onEndgetCurrencyValueDelegate == null)) {
                this.onEndgetCurrencyValueDelegate = new EndOperationDelegate(this.OnEndgetCurrencyValue);
            }
            if ((this.ongetCurrencyValueCompletedDelegate == null)) {
                this.ongetCurrencyValueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCurrencyValueCompleted);
            }
            base.InvokeAsync(this.onBegingetCurrencyValueDelegate, new object[] {
                        provider,
                        srcCurrency,
                        dstCurrency}, this.onEndgetCurrencyValueDelegate, this.ongetCurrencyValueCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IConverter.currencyServer.CurrencyServerWebServiceSoap.BegingetDollarValue(string provider, string currency, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetDollarValue(provider, currency, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        double IConverter.currencyServer.CurrencyServerWebServiceSoap.EndgetDollarValue(System.IAsyncResult result) {
            return base.Channel.EndgetDollarValue(result);
        }
        
        private System.IAsyncResult OnBegingetDollarValue(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string provider = ((string)(inValues[0]));
            string currency = ((string)(inValues[1]));
            return ((IConverter.currencyServer.CurrencyServerWebServiceSoap)(this)).BegingetDollarValue(provider, currency, callback, asyncState);
        }
        
        private object[] OnEndgetDollarValue(System.IAsyncResult result) {
            double retVal = ((IConverter.currencyServer.CurrencyServerWebServiceSoap)(this)).EndgetDollarValue(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetDollarValueCompleted(object state) {
            if ((this.getDollarValueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getDollarValueCompleted(this, new getDollarValueCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getDollarValueAsync(string provider, string currency) {
            this.getDollarValueAsync(provider, currency, null);
        }
        
        public void getDollarValueAsync(string provider, string currency, object userState) {
            if ((this.onBegingetDollarValueDelegate == null)) {
                this.onBegingetDollarValueDelegate = new BeginOperationDelegate(this.OnBegingetDollarValue);
            }
            if ((this.onEndgetDollarValueDelegate == null)) {
                this.onEndgetDollarValueDelegate = new EndOperationDelegate(this.OnEndgetDollarValue);
            }
            if ((this.ongetDollarValueCompletedDelegate == null)) {
                this.ongetDollarValueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetDollarValueCompleted);
            }
            base.InvokeAsync(this.onBegingetDollarValueDelegate, new object[] {
                        provider,
                        currency}, this.onEndgetDollarValueDelegate, this.ongetDollarValueCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IConverter.currencyServer.CurrencyServerWebServiceSoap.BegingetProviderDescription(string provider, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetProviderDescription(provider, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IConverter.currencyServer.CurrencyServerWebServiceSoap.EndgetProviderDescription(System.IAsyncResult result) {
            return base.Channel.EndgetProviderDescription(result);
        }
        
        private System.IAsyncResult OnBegingetProviderDescription(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string provider = ((string)(inValues[0]));
            return ((IConverter.currencyServer.CurrencyServerWebServiceSoap)(this)).BegingetProviderDescription(provider, callback, asyncState);
        }
        
        private object[] OnEndgetProviderDescription(System.IAsyncResult result) {
            string retVal = ((IConverter.currencyServer.CurrencyServerWebServiceSoap)(this)).EndgetProviderDescription(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetProviderDescriptionCompleted(object state) {
            if ((this.getProviderDescriptionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getProviderDescriptionCompleted(this, new getProviderDescriptionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getProviderDescriptionAsync(string provider) {
            this.getProviderDescriptionAsync(provider, null);
        }
        
        public void getProviderDescriptionAsync(string provider, object userState) {
            if ((this.onBegingetProviderDescriptionDelegate == null)) {
                this.onBegingetProviderDescriptionDelegate = new BeginOperationDelegate(this.OnBegingetProviderDescription);
            }
            if ((this.onEndgetProviderDescriptionDelegate == null)) {
                this.onEndgetProviderDescriptionDelegate = new EndOperationDelegate(this.OnEndgetProviderDescription);
            }
            if ((this.ongetProviderDescriptionCompletedDelegate == null)) {
                this.ongetProviderDescriptionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetProviderDescriptionCompleted);
            }
            base.InvokeAsync(this.onBegingetProviderDescriptionDelegate, new object[] {
                        provider}, this.onEndgetProviderDescriptionDelegate, this.ongetProviderDescriptionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IConverter.currencyServer.CurrencyServerWebServiceSoap.BegingetProviderTimestamp(string providerId, string provider, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetProviderTimestamp(providerId, provider, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IConverter.currencyServer.CurrencyServerWebServiceSoap.EndgetProviderTimestamp(System.IAsyncResult result) {
            return base.Channel.EndgetProviderTimestamp(result);
        }
        
        private System.IAsyncResult OnBegingetProviderTimestamp(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string providerId = ((string)(inValues[0]));
            string provider = ((string)(inValues[1]));
            return ((IConverter.currencyServer.CurrencyServerWebServiceSoap)(this)).BegingetProviderTimestamp(providerId, provider, callback, asyncState);
        }
        
        private object[] OnEndgetProviderTimestamp(System.IAsyncResult result) {
            string retVal = ((IConverter.currencyServer.CurrencyServerWebServiceSoap)(this)).EndgetProviderTimestamp(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetProviderTimestampCompleted(object state) {
            if ((this.getProviderTimestampCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getProviderTimestampCompleted(this, new getProviderTimestampCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getProviderTimestampAsync(string providerId, string provider) {
            this.getProviderTimestampAsync(providerId, provider, null);
        }
        
        public void getProviderTimestampAsync(string providerId, string provider, object userState) {
            if ((this.onBegingetProviderTimestampDelegate == null)) {
                this.onBegingetProviderTimestampDelegate = new BeginOperationDelegate(this.OnBegingetProviderTimestamp);
            }
            if ((this.onEndgetProviderTimestampDelegate == null)) {
                this.onEndgetProviderTimestampDelegate = new EndOperationDelegate(this.OnEndgetProviderTimestamp);
            }
            if ((this.ongetProviderTimestampCompletedDelegate == null)) {
                this.ongetProviderTimestampCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetProviderTimestampCompleted);
            }
            base.InvokeAsync(this.onBegingetProviderTimestampDelegate, new object[] {
                        providerId,
                        provider}, this.onEndgetProviderTimestampDelegate, this.ongetProviderTimestampCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IConverter.currencyServer.CurrencyServerWebServiceSoap.BegingetProviderList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetProviderList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IConverter.currencyServer.CurrencyServerWebServiceSoap.EndgetProviderList(System.IAsyncResult result) {
            return base.Channel.EndgetProviderList(result);
        }
        
        private System.IAsyncResult OnBegingetProviderList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((IConverter.currencyServer.CurrencyServerWebServiceSoap)(this)).BegingetProviderList(callback, asyncState);
        }
        
        private object[] OnEndgetProviderList(System.IAsyncResult result) {
            string retVal = ((IConverter.currencyServer.CurrencyServerWebServiceSoap)(this)).EndgetProviderList(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetProviderListCompleted(object state) {
            if ((this.getProviderListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getProviderListCompleted(this, new getProviderListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getProviderListAsync() {
            this.getProviderListAsync(null);
        }
        
        public void getProviderListAsync(object userState) {
            if ((this.onBegingetProviderListDelegate == null)) {
                this.onBegingetProviderListDelegate = new BeginOperationDelegate(this.OnBegingetProviderList);
            }
            if ((this.onEndgetProviderListDelegate == null)) {
                this.onEndgetProviderListDelegate = new EndOperationDelegate(this.OnEndgetProviderList);
            }
            if ((this.ongetProviderListCompletedDelegate == null)) {
                this.ongetProviderListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetProviderListCompleted);
            }
            base.InvokeAsync(this.onBegingetProviderListDelegate, null, this.onEndgetProviderListDelegate, this.ongetProviderListCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override IConverter.currencyServer.CurrencyServerWebServiceSoap CreateChannel() {
            return new CurrencyServerWebServiceSoapClientChannel(this);
        }
        
        private class CurrencyServerWebServiceSoapClientChannel : ChannelBase<IConverter.currencyServer.CurrencyServerWebServiceSoap>, IConverter.currencyServer.CurrencyServerWebServiceSoap {
            
            public CurrencyServerWebServiceSoapClientChannel(System.ServiceModel.ClientBase<IConverter.currencyServer.CurrencyServerWebServiceSoap> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BegingetDataSet(string provider, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = provider;
                System.IAsyncResult _result = base.BeginInvoke("getDataSet", _args, callback, asyncState);
                return _result;
            }
            
            public IConverter.currencyServer.ArrayOfXElement EndgetDataSet(System.IAsyncResult result) {
                object[] _args = new object[0];
                IConverter.currencyServer.ArrayOfXElement _result = ((IConverter.currencyServer.ArrayOfXElement)(base.EndInvoke("getDataSet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetXmlStream(string provider, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = provider;
                System.IAsyncResult _result = base.BeginInvoke("getXmlStream", _args, callback, asyncState);
                return _result;
            }
            
            public string EndgetXmlStream(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("getXmlStream", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetCurrencyValue(string provider, string srcCurrency, string dstCurrency, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = provider;
                _args[1] = srcCurrency;
                _args[2] = dstCurrency;
                System.IAsyncResult _result = base.BeginInvoke("getCurrencyValue", _args, callback, asyncState);
                return _result;
            }
            
            public double EndgetCurrencyValue(System.IAsyncResult result) {
                object[] _args = new object[0];
                double _result = ((double)(base.EndInvoke("getCurrencyValue", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetDollarValue(string provider, string currency, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = provider;
                _args[1] = currency;
                System.IAsyncResult _result = base.BeginInvoke("getDollarValue", _args, callback, asyncState);
                return _result;
            }
            
            public double EndgetDollarValue(System.IAsyncResult result) {
                object[] _args = new object[0];
                double _result = ((double)(base.EndInvoke("getDollarValue", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetProviderDescription(string provider, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = provider;
                System.IAsyncResult _result = base.BeginInvoke("getProviderDescription", _args, callback, asyncState);
                return _result;
            }
            
            public string EndgetProviderDescription(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("getProviderDescription", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetProviderTimestamp(string providerId, string provider, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = providerId;
                _args[1] = provider;
                System.IAsyncResult _result = base.BeginInvoke("getProviderTimestamp", _args, callback, asyncState);
                return _result;
            }
            
            public string EndgetProviderTimestamp(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("getProviderTimestamp", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetProviderList(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("getProviderList", _args, callback, asyncState);
                return _result;
            }
            
            public string EndgetProviderList(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("getProviderList", _args, result)));
                return _result;
            }
        }
    }
    
    [System.Xml.Serialization.XmlSchemaProviderAttribute(null, IsAny=true)]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Silverlight.Phone.ServiceReference", "3.7.0.0")]
    public partial class ArrayOfXElement : object, System.Xml.Serialization.IXmlSerializable {
        
        private System.Collections.Generic.List<System.Xml.Linq.XElement> nodesList = new System.Collections.Generic.List<System.Xml.Linq.XElement>();
        
        public ArrayOfXElement() {
        }
        
        public virtual System.Collections.Generic.List<System.Xml.Linq.XElement> Nodes {
            get {
                return this.nodesList;
            }
        }
        
        public virtual System.Xml.Schema.XmlSchema GetSchema() {
            throw new System.NotImplementedException();
        }
        
        public virtual void WriteXml(System.Xml.XmlWriter writer) {
            System.Collections.Generic.IEnumerator<System.Xml.Linq.XElement> e = nodesList.GetEnumerator();
            for (
            ; e.MoveNext(); 
            ) {
                ((System.Xml.Serialization.IXmlSerializable)(e.Current)).WriteXml(writer);
            }
        }
        
        public virtual void ReadXml(System.Xml.XmlReader reader) {
            for (
            ; (reader.NodeType != System.Xml.XmlNodeType.EndElement); 
            ) {
                if ((reader.NodeType == System.Xml.XmlNodeType.Element)) {
                    System.Xml.Linq.XElement elem = new System.Xml.Linq.XElement("default");
                    ((System.Xml.Serialization.IXmlSerializable)(elem)).ReadXml(reader);
                    Nodes.Add(elem);
                }
                else {
                    reader.Skip();
                }
            }
        }
    }
}
